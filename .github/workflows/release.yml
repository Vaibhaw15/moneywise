name: Build and Deploy Spring Boot JAR to EC2

on:
  push:
    branches:
      - QA
  pull_request:
    branches:
      - QA

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: ‚úÖ Checkout source code
        uses: actions/checkout@v4

      - name: ‚òï Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: üî® Build with Maven
        run: |
          mvn clean package -DskipTests
          echo "‚úÖ Build done. Available JARs:"
          ls -lh target/

      - name: üì§ Upload JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "target/*.jar"
          target: "/home/ubuntu/app/"
          debug: true # Set to true for more verbose SCP logs

      - name: üöÄ Deploy on EC2 and Start App
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 180s # Increased overall SSH connection timeout
          command_timeout: 400s # Increased timeout for commands run over SSH
          script: |
            echo "--- Starting EC2 Deployment Script ---"

            echo "‚úÖ Checking Java version on EC2:"
            java -version || { echo "‚ùå Java not installed or not in PATH. Please install Java 21 on your EC2 instance. Exiting."; exit 1; }

            echo "Attempting to change directory to /home/ubuntu/app..."
            cd /home/ubuntu/app || { echo "‚ùå Directory /home/ubuntu/app not found or accessible. Please ensure it exists and has correct permissions. Exiting."; exit 1; }
            echo "Current working directory on EC2: $(pwd)"

            echo "üõë Trying to stop existing app (if any)..."
            # Find PID of any running Java JAR application
            PID=$(pgrep -f 'java -jar')
            if [ -n "$PID" ]; then
              echo "Found existing app with PID: $PID. Sending SIGTERM to stop it..."
              kill "$PID"
              sleep 5 # Give the old process time to shut down gracefully
              # Check if process is still running after kill
              if pgrep -f 'java -jar' > /dev/null; then
                echo "‚ö†Ô∏è Previous app still running after SIGTERM. Sending SIGKILL..."
                kill -9 "$PID"
                sleep 2
              fi
              echo "‚úÖ Previous app stopped or forcibly killed."
            else
              echo "‚ÑπÔ∏è No previous app found running."
            fi

            echo "üì¶ Listing all JARs in the deployment directory:"
            ls -lh *.jar || { echo '‚ùå No JARs found after SCP! Please verify the "Upload JAR to EC2" step and the target path.'; exit 1; }

            echo "üîç Finding the latest deployable JAR (excluding '-original')..."
            # Use 'head -n 1' to get only the first (most recent) matching JAR
            JAR_FILE=$(ls -t *.jar | grep -v 'original' | head -n 1)

            if [ -z "$JAR_FILE" ]; then
              echo "‚ùå No deployable JAR file found in /home/ubuntu/app/. This might mean the build failed or the SCP did not transfer correctly."
              exit 1
            fi

            echo "üìå Using JAR file for deployment: $JAR_FILE"
            echo "üöÄ Starting application in background using nohup..."
            # Run the JAR in the background, redirecting stdout/stderr to app.log
            nohup java -jar "$JAR_FILE" > app.log 2>&1 &

            echo "Waiting 15 seconds for the application to start up and generate logs..."
            sleep 15 # Increased sleep to allow for more application startup time

            echo "üìÑ Displaying last 50 lines of app.log for status check:"
            if [ -f app.log ]; then
              tail -n 50 app.log || echo "‚ùå Could not read app.log (possible permissions issue or log file is empty)."
            else
              echo "‚ùå app.log not found. The application might not have started correctly or logging is misconfigured."
            fi

            echo "‚úÖ Deployment script completed. Please SSH into your EC2 instance and check 'tail -f app.log' for ongoing status."
            echo "--- EC2 Deployment Script Finished ---"