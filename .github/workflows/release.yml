name: Build and Deploy Spring Boot JAR to EC2

on:
  push:
    branches:
      - QA # Workflow triggers on push to the 'QA' branch
  pull_request:
    branches:
      - QA # Workflow triggers on pull requests targeting the 'QA' branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # Specifies the GitHub-hosted runner environment

    steps:
      - name: ‚úÖ Checkout source code
        uses: actions/checkout@v4 # Checks out your repository code

      - name: ‚òï Set up JDK 21
        uses: actions/setup-java@v4 # Installs Temurin OpenJDK 21
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: üî® Build with Maven
        run: |
          mvn clean package -DskipTests # Builds your Spring Boot application, skipping tests
          echo "‚úÖ Build done. Available JARs:"
          ls -lh target/ # Lists the generated JAR files

      - name: üì§ Upload JAR to EC2
        uses: appleboy/scp-action@v0.1.7 # Securely copies the JAR to your EC2 instance
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "target/*.jar"
          target: "/home/ubuntu/app/"
          debug: true # Enables verbose logging for SCP

      - name: üöÄ Deploy on EC2 and Start App
        uses: appleboy/ssh-action@v1.0.0 # Executes commands over SSH on EC2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 600s # **Maxed out SSH connection timeout to 10 minutes**
          command_timeout: 1800s # **Maxed out script execution timeout to 30 minutes**
          script: |
            echo "--- Starting EC2 Deployment Script ---"
            echo "Current timestamp (start of script): $(date)"

            echo "‚úÖ Checking Java version on EC2:"
            java -version || { echo "‚ùå Java not installed or not in PATH. Please install Java 21 on your EC2 instance. Exiting."; exit 1; }

            echo "Attempting to change directory to /home/ubuntu/app..."
            cd /home/ubuntu/app || { echo "‚ùå Directory /home/ubuntu/app not found or accessible. Please ensure it exists and has correct permissions. Exiting."; exit 1; }
            echo "Current working directory on EC2: $(pwd)"

            echo "üõë Trying to stop existing app (if any)..."
            PID=$(pgrep -f 'java -jar')
            if [ -n "$PID" ]; then
              echo "Found existing app with PID: $PID. Sending SIGTERM to stop it gracefully... Timestamp: $(date)"
              kill "$PID"
              sleep 30 # **Maxed out sleep** for graceful shutdown (from 15s)

              if pgrep -f 'java -jar' > /dev/null; then
                echo "‚ö†Ô∏è Previous app still running after SIGTERM. Sending SIGKILL to force stop... Timestamp: $(date)"
                kill -9 "$PID"
                sleep 20 # **Maxed out sleep** after forceful kill (from 10s)
              fi

              if pgrep -f 'java -jar' > /dev/null; then
                echo "‚ùå Error: Previous app (PID $PID) is *still* running after forceful kill. Manual intervention may be needed on EC2. Timestamp: $(date)"
                exit 1
              else
                echo "‚úÖ Previous app stopped or forcibly killed. Timestamp: $(date)"
              fi
            else
              echo "‚ÑπÔ∏è No previous app found running. Timestamp: $(date)"
            fi

            echo "üì¶ Listing all JARs in the deployment directory: Timestamp: $(date)"
            ls -lh *.jar || { echo '‚ùå No JARs found after SCP! Please verify the "Upload JAR to EC2" step and the target path.'; exit 1; }

            echo "üîç Finding the latest deployable JAR (excluding '-original')... Timestamp: $(date)"
            JAR_FILE=$(ls -t *.jar | grep -v 'original' | head -n 1)

            if [ -z "$JAR_FILE" ]; then
              echo "‚ùå No deployable JAR file found in /home/ubuntu/app/. This might mean the build failed or the SCP did not transfer correctly. Timestamp: $(date)"
              exit 1
            fi

            echo "üìå Using JAR file for deployment: $JAR_FILE. Timestamp: $(date)"
            echo "üöÄ Starting application in background using nohup... Timestamp: $(date)"
            nohup java -jar "$JAR_FILE" > app.log 2>&1 &

            echo "Waiting 90 seconds for the application to start up and generate logs... Timestamp: $(date)"
            sleep 90 # **Maxed out sleep** for new application startup (from 45s)

            echo "üìÑ Displaying last 50 lines of app.log for status check: Timestamp: $(date)"
            if [ -f app.log ]; then
              tail -n 50 app.log || echo "‚ùå Could not read app.log (possible permissions issue or log file is empty). Timestamp: $(date)"
            else
              echo "‚ùå app.log not found. The application might not have started correctly or logging is misconfigured. Timestamp: $(date)"
            fi

            echo "‚úÖ Deployment script completed. Please SSH into your EC2 instance and check 'tail -f app.log' for ongoing status. Timestamp: $(date)"
            echo "--- EC2 Deployment Script Finished ---"
            echo "Final timestamp (end of script): $(date)"
