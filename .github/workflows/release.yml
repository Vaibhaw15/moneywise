name: Build and Deploy Spring Boot JAR to EC2

on:
  push:
    branches:
      - QA # Triggers on push to the 'QA' branch
  pull_request:
    branches:
      - QA # Triggers on PR to the 'QA' branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # GitHub-hosted runner for the build process

    steps:
      - name: ‚úÖ Checkout source code
        uses: actions/checkout@v4 # Action to check out your repository code

      - name: ‚òï Set up JDK 21
        uses: actions/setup-java@v4 # Action to set up Java Development Kit
        with:
          distribution: 'temurin' # Using Temurin distribution for OpenJDK
          java-version: '21'      # Specifying Java 21

      - name: üî® Build with Maven
        run: |
          mvn clean package -DskipTests # Clean build and package, skipping tests for faster CI
          echo "‚úÖ Build done. Available JARs:"
          ls -lh target/ # List generated JARs for verification

      - name: üì§ Upload JAR to EC2
        uses: appleboy/scp-action@v0.1.7 # Action to securely copy files to EC2
        with:
          host: ${{ secrets.EC2_HOST }}      # EC2 hostname/IP from GitHub Secrets
          username: ${{ secrets.EC2_USER }}  # EC2 SSH username from GitHub Secrets
          key: ${{ secrets.EC2_SSH_KEY }}    # EC2 SSH private key from GitHub Secrets
          source: "target/*.jar"             # Source JAR files from the build output
          target: "/home/ubuntu/app/"        # Destination directory on EC2
          debug: true # Enable debug logging for SCP action

      - name: üöÄ Deploy on EC2 and Start App
        uses: appleboy/ssh-action@v1.0.0 # Action to execute commands over SSH on EC2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 400s # Increased overall SSH connection timeout to 6 minutes 40 seconds
          command_timeout: 900s # Increased timeout for commands run over SSH to 15 minutes (was 400s)
          script: |
            echo "--- Starting EC2 Deployment Script ---"

            echo "‚úÖ Checking Java version on EC2:"
            # Check if Java 21 is installed. Exit if not.
            java -version || { echo "‚ùå Java not installed or not in PATH. Please install Java 21 on your EC2 instance. Exiting."; exit 1; }

            echo "Attempting to change directory to /home/ubuntu/app..."
            # Navigate to the deployment directory. Exit if not found/accessible.
            cd /home/ubuntu/app || { echo "‚ùå Directory /home/ubuntu/app not found or accessible. Please ensure it exists and has correct permissions. Exiting."; exit 1; }
            echo "Current working directory on EC2: $(pwd)"

            echo "üõë Trying to stop existing app (if any)..."
            # Find PID of any running Java JAR application
            PID=$(pgrep -f 'java -jar')
            if [ -n "$PID" ]; then
              echo "Found existing app with PID: $PID. Sending SIGTERM to stop it gracefully..."
              kill "$PID"
              sleep 10 # Give the old process time to shut down gracefully (increased from 5s)
              
              # Check if process is still running after SIGTERM
              if pgrep -f 'java -jar' > /dev/null; then
                echo "‚ö†Ô∏è Previous app still running after SIGTERM. Sending SIGKILL to force stop..."
                kill -9 "$PID"
                sleep 5 # Give it a moment to be forcibly killed (increased from 2s)
              fi
              echo "‚úÖ Previous app stopped or forcibly killed."
            else
              echo "‚ÑπÔ∏è No previous app found running."
            fi

            echo "üì¶ Listing all JARs in the deployment directory:"
            # List JARs in the target directory. Exit if none found.
            ls -lh *.jar || { echo '‚ùå No JARs found after SCP! Please verify the "Upload JAR to EC2" step and the target path.'; exit 1; }

            echo "üîç Finding the latest deployable JAR (excluding '-original')..."
            # Use 'ls -t' to get newest first, filter out '-original' JARs, and take the first one.
            JAR_FILE=$(ls -t *.jar | grep -v 'original' | head -n 1)

            if [ -z "$JAR_FILE" ]; then
              echo "‚ùå No deployable JAR file found in /home/ubuntu/app/. This might mean the build failed or the SCP did not transfer correctly."
              exit 1
            fi

            echo "üìå Using JAR file for deployment: $JAR_FILE"
            echo "üöÄ Starting application in background using nohup..."
            # Run the JAR in the background using nohup to detach it from the SSH session.
            # Redirect stdout and stderr to app.log for persistent logging.
            nohup java -jar "$JAR_FILE" > app.log 2>&1 &

            echo "Waiting 30 seconds for the application to start up and generate logs..."
            sleep 30 # Increased sleep to allow for more application startup time (was 15s)

            echo "üìÑ Displaying last 50 lines of app.log for status check:"
            # Check if app.log exists and display its last 50 lines.
            if [ -f app.log ]; then
              tail -n 50 app.log || echo "‚ùå Could not read app.log (possible permissions issue or log file is empty)."
            else
              echo "‚ùå app.log not found. The application might not have started correctly or logging is misconfigured."
            fi

            echo "‚úÖ Deployment script completed. Please SSH into your EC2 instance and check 'tail -f app.log' for ongoing status."
            echo "--- EC2 Deployment Script Finished ---"
