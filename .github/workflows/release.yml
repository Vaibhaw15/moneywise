name: Build and Deploy Spring Boot JAR to EC2

on:
  push:
    branches:
      - QA # Workflow triggers on push to the 'QA' branch
  pull_request:
    branches:
      - QA # Workflow triggers on pull requests targeting the 'QA' branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # Specifies the GitHub-hosted runner environment

    steps:
      - name: ‚úÖ Checkout source code
        uses: actions/checkout@v4 # Checks out your repository code

      - name: ‚òï Set up JDK 21
        uses: actions/setup-java@v4 # Installs Temurin OpenJDK 21
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: üî® Build with Maven
        run: |
          mvn clean package -DskipTests # Builds your Spring Boot application, skipping tests
          echo "‚úÖ Build done. Available JARs:"
          ls -lh target/ # Lists the generated JAR files

      - name: üì§ Upload JAR to EC2
        uses: appleboy/scp-action@v0.1.7 # Securely copies the JAR to your EC2 instance
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "target/*.jar"
          target: "/home/ubuntu/app/"
          debug: true # Enables verbose logging for SCP

      - name: üöÄ Deploy on EC2 and Start App
        uses: appleboy/ssh-action@v1.0.0 # Executes commands over SSH on EC2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 500s # Increased overall SSH connection timeout to 8 minutes 20 seconds
          command_timeout: 1200s # Increased timeout for commands run over SSH to 20 minutes
          script: |
            echo "--- Starting EC2 Deployment Script ---"

            echo "‚úÖ Checking Java version on EC2:"
            # Verifies Java 21 is installed and in PATH. Exits if not.
            java -version || { echo "‚ùå Java not installed or not in PATH. Please install Java 21 on your EC2 instance. Exiting."; exit 1; }

            echo "Attempting to change directory to /home/ubuntu/app..."
            # Changes to the deployment directory. Exits if not found or accessible.
            cd /home/ubuntu/app || { echo "‚ùå Directory /home/ubuntu/app not found or accessible. Please ensure it exists and has correct permissions. Exiting."; exit 1; }
            echo "Current working directory on EC2: $(pwd)"

            echo "üõë Trying to stop existing app (if any)..."
            # Finds PID of any running Java JAR application
            PID=$(pgrep -f 'java -jar')
            if [ -n "$PID" ]; then
              echo "Found existing app with PID: $PID. Sending SIGTERM to stop it gracefully..."
              kill "$PID"
              sleep 15 # **Increased sleep** for graceful shutdown (from 10s)

              # Checks if process is still running after SIGTERM
              if pgrep -f 'java -jar' > /dev/null; then
                echo "‚ö†Ô∏è Previous app still running after SIGTERM. Sending SIGKILL to force stop..."
                kill -9 "$PID" # Forces termination if SIGTERM fails
                sleep 10 # **Increased sleep** after forceful kill (from 5s)
              fi

              # Final check to ensure the process is truly gone
              if pgrep -f 'java -jar' > /dev/null; then
                echo "‚ùå Error: Previous app (PID $PID) is *still* running after forceful kill. Manual intervention may be needed on EC2."
                exit 1 # Fails the workflow if the old app persists
              else
                echo "‚úÖ Previous app stopped or forcibly killed."
              fi
            else
              echo "‚ÑπÔ∏è No previous app found running."
            fi

            echo "üì¶ Listing all JARs in the deployment directory:"
            # Lists JARs in the target directory. Exits if none found after SCP.
            ls -lh *.jar || { echo '‚ùå No JARs found after SCP! Please verify the "Upload JAR to EC2" step and the target path.'; exit 1; }

            echo "üîç Finding the latest deployable JAR (excluding '-original')..."
            # Identifies the most recent executable JAR file for deployment
            JAR_FILE=$(ls -t *.jar | grep -v 'original' | head -n 1)

            if [ -z "$JAR_FILE" ]; then
              echo "‚ùå No deployable JAR file found in /home/ubuntu/app/. This might mean the build failed or the SCP did not transfer correctly."
              exit 1
            fi

            echo "üìå Using JAR file for deployment: $JAR_FILE"
            echo "üöÄ Starting application in background using nohup..."
            # Starts the new Spring Boot application in the background, redirecting logs
            nohup java -jar "$JAR_FILE" > app.log 2>&1 &

            echo "Waiting 45 seconds for the application to start up and generate logs..."
            sleep 45 # **Increased sleep** for new application startup (from 30s)

            echo "üìÑ Displaying last 50 lines of app.log for status check:"
            # Displays the latest log entries for immediate feedback
            if [ -f app.log ]; then
              tail -n 50 app.log || echo "‚ùå Could not read app.log (possible permissions issue or log file is empty)."
            else
              echo "‚ùå app.log not found. The application might not have started correctly or logging is misconfigured."
            fi

            echo "‚úÖ Deployment script completed. Please SSH into your EC2 instance and check 'tail -f app.log' for ongoing status."
            echo "--- EC2 Deployment Script Finished ---"
